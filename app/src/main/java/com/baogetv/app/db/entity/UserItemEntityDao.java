package com.baogetv.app.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ITEM_ENTITY".
*/
public class UserItemEntityDao extends AbstractDao<UserItemEntity, Long> {

    public static final String TABLENAME = "USER_ITEM_ENTITY";

    /**
     * Properties of entity UserItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Openid = new Property(2, String.class, "openid", false, "OPENID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Device_token = new Property(5, String.class, "device_token", false, "DEVICE_TOKEN");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Intro = new Property(8, String.class, "intro", false, "INTRO");
        public final static Property Height = new Property(9, String.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(10, String.class, "weight", false, "WEIGHT");
        public final static Property Bfr = new Property(11, String.class, "bfr", false, "BFR");
        public final static Property Pic = new Property(12, String.class, "pic", false, "PIC");
        public final static Property Score = new Property(13, String.class, "score", false, "SCORE");
        public final static Property Level_id = new Property(14, String.class, "level_id", false, "LEVEL_ID");
        public final static Property Level_time = new Property(15, String.class, "level_time", false, "LEVEL_TIME");
        public final static Property Grade = new Property(16, String.class, "grade", false, "GRADE");
        public final static Property Is_sure = new Property(17, String.class, "is_sure", false, "IS_SURE");
        public final static Property Dumb_time = new Property(18, String.class, "dumb_time", false, "DUMB_TIME");
        public final static Property Is_push_comments = new Property(19, String.class, "is_push_comments", false, "IS_PUSH_COMMENTS");
        public final static Property Is_push_likes = new Property(20, String.class, "is_push_likes", false, "IS_PUSH_LIKES");
        public final static Property Read_message_ids = new Property(21, String.class, "read_message_ids", false, "READ_MESSAGE_IDS");
        public final static Property Del_message_ids = new Property(22, String.class, "del_message_ids", false, "DEL_MESSAGE_IDS");
        public final static Property Login = new Property(23, String.class, "login", false, "LOGIN");
        public final static Property Reg_ip = new Property(24, String.class, "reg_ip", false, "REG_IP");
        public final static Property Reg_time = new Property(25, String.class, "reg_time", false, "REG_TIME");
        public final static Property Last_login_ip = new Property(26, String.class, "last_login_ip", false, "LAST_LOGIN_IP");
        public final static Property Last_login_time = new Property(27, String.class, "last_login_time", false, "LAST_LOGIN_TIME");
        public final static Property Status = new Property(28, String.class, "status", false, "STATUS");
        public final static Property Token = new Property(29, String.class, "token", false, "TOKEN");
        public final static Property Pic_url = new Property(30, String.class, "pic_url", false, "PIC_URL");
        public final static Property Level_name = new Property(31, String.class, "level_name", false, "LEVEL_NAME");
        public final static Property Medal = new Property(32, String.class, "medal", false, "MEDAL");
        public final static Property Level_pic_url = new Property(33, String.class, "level_pic_url", false, "LEVEL_PIC_URL");
        public final static Property Next_level_score = new Property(34, String.class, "next_level_score", false, "NEXT_LEVEL_SCORE");
        public final static Property Age = new Property(35, int.class, "age", false, "AGE");
    }


    public UserItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ITEM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"OPENID\" TEXT," + // 2: openid
                "\"USERNAME\" TEXT," + // 3: username
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"DEVICE_TOKEN\" TEXT," + // 5: device_token
                "\"SEX\" TEXT," + // 6: sex
                "\"BIRTHDAY\" TEXT," + // 7: birthday
                "\"INTRO\" TEXT," + // 8: intro
                "\"HEIGHT\" TEXT," + // 9: height
                "\"WEIGHT\" TEXT," + // 10: weight
                "\"BFR\" TEXT," + // 11: bfr
                "\"PIC\" TEXT," + // 12: pic
                "\"SCORE\" TEXT," + // 13: score
                "\"LEVEL_ID\" TEXT," + // 14: level_id
                "\"LEVEL_TIME\" TEXT," + // 15: level_time
                "\"GRADE\" TEXT," + // 16: grade
                "\"IS_SURE\" TEXT," + // 17: is_sure
                "\"DUMB_TIME\" TEXT," + // 18: dumb_time
                "\"IS_PUSH_COMMENTS\" TEXT," + // 19: is_push_comments
                "\"IS_PUSH_LIKES\" TEXT," + // 20: is_push_likes
                "\"READ_MESSAGE_IDS\" TEXT," + // 21: read_message_ids
                "\"DEL_MESSAGE_IDS\" TEXT," + // 22: del_message_ids
                "\"LOGIN\" TEXT," + // 23: login
                "\"REG_IP\" TEXT," + // 24: reg_ip
                "\"REG_TIME\" TEXT," + // 25: reg_time
                "\"LAST_LOGIN_IP\" TEXT," + // 26: last_login_ip
                "\"LAST_LOGIN_TIME\" TEXT," + // 27: last_login_time
                "\"STATUS\" TEXT," + // 28: status
                "\"TOKEN\" TEXT," + // 29: token
                "\"PIC_URL\" TEXT," + // 30: pic_url
                "\"LEVEL_NAME\" TEXT," + // 31: level_name
                "\"MEDAL\" TEXT," + // 32: medal
                "\"LEVEL_PIC_URL\" TEXT," + // 33: level_pic_url
                "\"NEXT_LEVEL_SCORE\" TEXT," + // 34: next_level_score
                "\"AGE\" INTEGER NOT NULL );"); // 35: age
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserItemEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(3, openid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String device_token = entity.getDevice_token();
        if (device_token != null) {
            stmt.bindString(6, device_token);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(9, intro);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(10, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(11, weight);
        }
 
        String bfr = entity.getBfr();
        if (bfr != null) {
            stmt.bindString(12, bfr);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(13, pic);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(14, score);
        }
 
        String level_id = entity.getLevel_id();
        if (level_id != null) {
            stmt.bindString(15, level_id);
        }
 
        String level_time = entity.getLevel_time();
        if (level_time != null) {
            stmt.bindString(16, level_time);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(17, grade);
        }
 
        String is_sure = entity.getIs_sure();
        if (is_sure != null) {
            stmt.bindString(18, is_sure);
        }
 
        String dumb_time = entity.getDumb_time();
        if (dumb_time != null) {
            stmt.bindString(19, dumb_time);
        }
 
        String is_push_comments = entity.getIs_push_comments();
        if (is_push_comments != null) {
            stmt.bindString(20, is_push_comments);
        }
 
        String is_push_likes = entity.getIs_push_likes();
        if (is_push_likes != null) {
            stmt.bindString(21, is_push_likes);
        }
 
        String read_message_ids = entity.getRead_message_ids();
        if (read_message_ids != null) {
            stmt.bindString(22, read_message_ids);
        }
 
        String del_message_ids = entity.getDel_message_ids();
        if (del_message_ids != null) {
            stmt.bindString(23, del_message_ids);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(24, login);
        }
 
        String reg_ip = entity.getReg_ip();
        if (reg_ip != null) {
            stmt.bindString(25, reg_ip);
        }
 
        String reg_time = entity.getReg_time();
        if (reg_time != null) {
            stmt.bindString(26, reg_time);
        }
 
        String last_login_ip = entity.getLast_login_ip();
        if (last_login_ip != null) {
            stmt.bindString(27, last_login_ip);
        }
 
        String last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindString(28, last_login_time);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(29, status);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(30, token);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(31, pic_url);
        }
 
        String level_name = entity.getLevel_name();
        if (level_name != null) {
            stmt.bindString(32, level_name);
        }
 
        String medal = entity.getMedal();
        if (medal != null) {
            stmt.bindString(33, medal);
        }
 
        String level_pic_url = entity.getLevel_pic_url();
        if (level_pic_url != null) {
            stmt.bindString(34, level_pic_url);
        }
 
        String next_level_score = entity.getNext_level_score();
        if (next_level_score != null) {
            stmt.bindString(35, next_level_score);
        }
        stmt.bindLong(36, entity.getAge());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserItemEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(3, openid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String device_token = entity.getDevice_token();
        if (device_token != null) {
            stmt.bindString(6, device_token);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(9, intro);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(10, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(11, weight);
        }
 
        String bfr = entity.getBfr();
        if (bfr != null) {
            stmt.bindString(12, bfr);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(13, pic);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(14, score);
        }
 
        String level_id = entity.getLevel_id();
        if (level_id != null) {
            stmt.bindString(15, level_id);
        }
 
        String level_time = entity.getLevel_time();
        if (level_time != null) {
            stmt.bindString(16, level_time);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(17, grade);
        }
 
        String is_sure = entity.getIs_sure();
        if (is_sure != null) {
            stmt.bindString(18, is_sure);
        }
 
        String dumb_time = entity.getDumb_time();
        if (dumb_time != null) {
            stmt.bindString(19, dumb_time);
        }
 
        String is_push_comments = entity.getIs_push_comments();
        if (is_push_comments != null) {
            stmt.bindString(20, is_push_comments);
        }
 
        String is_push_likes = entity.getIs_push_likes();
        if (is_push_likes != null) {
            stmt.bindString(21, is_push_likes);
        }
 
        String read_message_ids = entity.getRead_message_ids();
        if (read_message_ids != null) {
            stmt.bindString(22, read_message_ids);
        }
 
        String del_message_ids = entity.getDel_message_ids();
        if (del_message_ids != null) {
            stmt.bindString(23, del_message_ids);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(24, login);
        }
 
        String reg_ip = entity.getReg_ip();
        if (reg_ip != null) {
            stmt.bindString(25, reg_ip);
        }
 
        String reg_time = entity.getReg_time();
        if (reg_time != null) {
            stmt.bindString(26, reg_time);
        }
 
        String last_login_ip = entity.getLast_login_ip();
        if (last_login_ip != null) {
            stmt.bindString(27, last_login_ip);
        }
 
        String last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindString(28, last_login_time);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(29, status);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(30, token);
        }
 
        String pic_url = entity.getPic_url();
        if (pic_url != null) {
            stmt.bindString(31, pic_url);
        }
 
        String level_name = entity.getLevel_name();
        if (level_name != null) {
            stmt.bindString(32, level_name);
        }
 
        String medal = entity.getMedal();
        if (medal != null) {
            stmt.bindString(33, medal);
        }
 
        String level_pic_url = entity.getLevel_pic_url();
        if (level_pic_url != null) {
            stmt.bindString(34, level_pic_url);
        }
 
        String next_level_score = entity.getNext_level_score();
        if (next_level_score != null) {
            stmt.bindString(35, next_level_score);
        }
        stmt.bindLong(36, entity.getAge());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserItemEntity readEntity(Cursor cursor, int offset) {
        UserItemEntity entity = new UserItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // openid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // device_token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // intro
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // height
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // weight
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // bfr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pic
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // score
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // level_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // level_time
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // grade
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // is_sure
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // dumb_time
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // is_push_comments
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // is_push_likes
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // read_message_ids
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // del_message_ids
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // login
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // reg_ip
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // reg_time
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // last_login_ip
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // last_login_time
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // status
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // token
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // pic_url
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // level_name
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // medal
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // level_pic_url
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // next_level_score
            cursor.getInt(offset + 35) // age
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserItemEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpenid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevice_token(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIntro(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHeight(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeight(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBfr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setScore(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLevel_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLevel_time(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGrade(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIs_sure(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDumb_time(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIs_push_comments(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIs_push_likes(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRead_message_ids(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDel_message_ids(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLogin(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setReg_ip(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setReg_time(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLast_login_ip(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setLast_login_time(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setStatus(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setToken(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPic_url(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setLevel_name(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMedal(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setLevel_pic_url(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setNext_level_score(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setAge(cursor.getInt(offset + 35));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserItemEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserItemEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserItemEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
